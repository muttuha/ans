#include"GL/glut.h"
#include<stdio.h>
#include<stdarg.h>
#include<math.h>

#define TIMER 33

void *font = GLUT_STROKE_ROMAN;
void *fonts[] =
{GLUT_STROKE_ROMAN, GLUT_STROKE_MONO_ROMAN};
static float xrot;
int value,val,valu,v;
void polygon();
int theObject = -1;
char *objectNames[10] ={"Tubes","Octohedron","Tetrahedron","Cube"};


void output(GLfloat x, GLfloat y, char *format,...)
{
  	va_list args;
  	char buffer[200], *p;
 	 if(theObject>=0)
  	{
   		va_start(args, format);
   		vsprintf(buffer, format, args);
  		 va_end(args);
   		glPushMatrix();
   		glTranslatef(x, y, 0);
   		for (p = buffer; *p; p++)
   		glutStrokeCharacter(font, *p);
   		glPopMatrix();
  	}
}

void text()
{
  	glColor3f(1.0,0.0,0.0);
  	glMatrixMode(GL_PROJECTION);
 	glPushMatrix();
  	glLoadIdentity();
  	gluOrtho2D(0, 3000, 0, 3000);
  	glMatrixMode(GL_MODELVIEW);
  	glPushMatrix();
  	glLoadIdentity();
  	glColor3f(1.0,1.0,1.0);
  	output(1800,2800, "%s",objectNames[theObject]);
  	glPopMatrix();
  	glMatrixMode(GL_PROJECTION);
  	glPopMatrix();
  	glMatrixMode(GL_MODELVIEW);
  	glPopAttrib();
}

void Colors()
{
  	switch(val)
  	{
  		case 3:
    		      glColor3f(1.0,0.0,0.0);
		break;
  		case 4:
   		      glColor3f(0.0,1.0,0.0);
		break;
  		case 5:
    		       glColor3f(0.0,0.0,1.0);
		break;
 	 	case 6:
    		       glColor3f(1.0,1.0,1.0);
		break;
  		case 7:
    		       glColor3f(1.0,1.0,0.0);
		break;
  		default: glColor3f(.5, .5, 1.);
	 	 break;
 	 }
 
}
void col(int p)
{
	val=p;
}

void drawScene(GLenum order)
{
   	 GLfloat pos[4] = {-2.5, 5., 2.2, 1.};
    	glLightfv (GL_LIGHT1, GL_POSITION, pos);
	glPushMatrix();
	glEnable (GL_CULL_FACE);
	glCullFace (GL_BACK);
	glFrontFace (order);
   	text();
	
	/* Draw the walls */
    	glColor3f (1., 1., 1.);
	glBegin(GL_QUADS);
		glNormal3f (1., 0., 0.);
		glVertex3f (-3., 3., 4.);
		glVertex3f (-3., -3., 4.);
		glVertex3f (-3., -3., -3.);
	 	glVertex3f (-3., 3., -3.);
	  glNormal3f (0., 0., 1.);
		glVertex3f (-3., 3., -3.);
		glVertex3f (-3., -3., -3.);
		glVertex3f (3., -3., -3.);
		glVertex3f (3., 3., -3.);
	  glNormal3f (-1., 0., 0.);
		glVertex3f (3., 3., -3.);
		glVertex3f (3., -3., -3.);
		glVertex3f (3., -3., 3.);
		glVertex3f (3., 3., 3.);
	glEnd();
	glDisable (GL_CULL_FACE);

	/* Draw the polygon */
    	glRotatef(xrot, 1.,1., 1.);
		Colors();
    	glPushMatrix ();
    	glPopMatrix ();
	polygon();
	glPopMatrix();
	
}
void tor()
{
	theObject = 0;
	glutSolidTorus(0.2,0.3,80,90);
	glTranslatef(0.0,0.0,0.6);
	glutSolidTorus(0.1,0.5,80,90);
}

void oct()
{
	theObject=1;
	glutSolidOctahedron();
}
void tet()
{
	theObject = 2;
	glutSolidTetrahedron();
}

void cube()
{
	theObject = 3;
	glutSolidCube(1);
}

void polygon()
{
	if(value==14)
		tor();
	if(value==15)
		oct();
	if(value==16)
		tet();
	if(value==17)
	{
		cube();
	}
}
void pol(int p)
{
	value=p;
}

void main_menu(int valu)
{
	value=valu;
  if (value == 0)
    exit(0);
}

static void display( void )
{
   	 glClear (GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
   
    	glMatrixMode(GL_MODELVIEW);
    	glLoadIdentity ();
    	gluLookAt (2., 1., 4., -1., 0., 0.,0., 1., 0.);
	
/* Draw reflected scene first */
	glPushMatrix ();

	/* Mirrors lies in YZ plane, we can scale mirror in all three axes */
	glScalef (-1., 1., 1.);

	/* Mirror is 2.0 units from origin, so translate by 4.0 */
	glTranslatef (4., 0., 0.);
    	drawScene(GL_CW);
	glPopMatrix ();

	/* draw mirror */
	glClear (GL_DEPTH_BUFFER_BIT);
	glPushAttrib (0xffffffff);
	glDisable (GL_LIGHTING);

	/* Create imperfect reflector effect by blending a black
	   mirror over the reflected scene with alpha of 0.05 */
	glEnable (GL_BLEND);
	glBlendFunc (GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
	glPointSize(6);
	glColor3f(1.0,0.0,0.0);
	glBegin (GL_LINE_LOOP);
	glVertex3f (-2.,1.5, 2.2);
	glVertex3f (-2., -1.5, 2.5);
	glVertex3f (-2., -1.5, -2.5);
	glVertex3f (-2., 1.5, -2.5);
	glEnd ();
	glColor4f (0., 0., 0., 0.05);
	glBegin (GL_QUADS);
	glVertex3f (-2.,1.5, 2.2);
	glVertex3f (-2., -1.5, 2.5);
	glVertex3f (-2., -1.5, -2.5);
	glVertex3f (-2., 1.5, -2.5);
	glEnd ();
	glPopAttrib();

	/* Draw the real scene */
    		drawScene(GL_CCW);
    	glutSwapBuffers();
}

void selectFont(int newfont)
{
 	font = fonts[newfont];
  	glutPostRedisplay();
}
void reshape(int w, int h)
{
    	glViewport (0, 0, w, h);       
    	glMatrixMode (GL_PROJECTION);  
   	glLoadIdentity ();
    	gluPerspective (50., (float)w/(float)h, 1., 20.);
}

void kb(unsigned char key, int x, int y)
{
	int nv=value,cv=val;
	if(key=='n' && nv>=14 && nv<=17)  value++;

	if(key=='n' && nv==17)  value=14;
		
	if(key=='c' && cv>=3 && cv<=7)  val++;
		
	if(key=='c' && cv==7)  val=3;
		
	if(key=='i' && v<16)  v++;
		
	if(key=='d' &&v>=1)  v--;
}

static void timer (int value)
{
    	xrot +=v;
    	if (xrot > 360.f) xrot -= 360.f;
    	glutPostRedisplay ();
    glutTimerFunc (TIMER, timer, 0);
}

static void init ()
{
    	int s1,s2,s3;
    	xrot = 1.;
    	glEnable (GL_DEPTH_TEST);
    	{	GLfloat white[4] = {1., 1., 1., 1.};
        		GLfloat black[4] = {0., 0., 0., 0.};

        /* Set up light1 */
        		glEnable (GL_LIGHTING);
        		glEnable (GL_LIGHT1);
        		glLightfv (GL_LIGHT1, GL_DIFFUSE, white);
        		glLightfv (GL_LIGHT1, GL_SPECULAR, white);

        /* ambient and diffuse will track glColor */
        		glEnable (GL_COLOR_MATERIAL);
        		glColorMaterial (GL_FRONT, GL_AMBIENT_AND_DIFFUSE);
        		glMaterialfv (GL_FRONT, GL_SPECULAR, white);
		glMaterialf (GL_FRONT, GL_SHININESS, 20.);
    	}
	glutDisplayFunc (display); 
   	glutReshapeFunc (reshape);
    	glutTimerFunc (TIMER, timer, 0);
    	s1=glutCreateMenu(pol);
    		glutAddMenuEntry("Tubes", 14);
    		glutAddMenuEntry("Octahedron", 15);
		glutAddMenuEntry("Tetrahedron",16);
		glutAddMenuEntry("Cube",17);
	s2= glutCreateMenu(col);
    		glutAddMenuEntry("red", 3);
    		glutAddMenuEntry("green", 4);
    		glutAddMenuEntry("Blue",5);
    		glutAddMenuEntry("white",6);
    		glutAddMenuEntry("yellow",7);
	s3=glutCreateMenu(selectFont);
    		glutAddMenuEntry("Roman",0);
    		glutAddMenuEntry("Mono Roman",1);
    		glutCreateMenu(main_menu);
   	glutAddSubMenu("Object",s1);
	glutAddSubMenu("Colors",s2);
	glutAddSubMenu("texts",s3);
	glutAddMenuEntry("Quit", 0);
   	 glutAttachMenu(GLUT_RIGHT_BUTTON);
}

void main(int argc, char** argv)
{
   	 glutInit (&argc,argv);
    	glutInitDisplayMode (GLUT_RGB | GLUT_DEPTH | GLUT_DOUBLE); 
    	glutInitWindowSize (300,300);
   	 glutInitWindowPosition (0,0); 
    	glutCreateWindow ("Mirror Reflection");
	glutKeyboardFunc(kb);
   	 init ();	
    	glutMainLoop ();
}



